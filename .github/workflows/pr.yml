name: PR Deployment

on:
  pull_request:
    paths:
      - "src/web-admin/**"
      - "src/web-site/**"
      - "src/web-supervisor/**"

env:
  ALLOWED_PATHS: "src/web-admin src/web-site src/web-supervisor"
  STAGING_HOST_PREFIX: "staging-pr"
  STAGING_HOST_DOMAIN: "sample.com"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: azure cli login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account show

      - name: Get Changed Folders
        id: changed-folders
        run: |
          git fetch origin

          IFS=' ' read -ra ALLOWED_PATHS_ARR <<< "$ALLOWED_PATHS"

          BASE_REF=${{ github.event.pull_request.base.ref }}
          HEAD_SHA=${{ github.event.pull_request.head.sha }}

          CHANGED_DIRS=$(git diff --name-only origin/${BASE_REF}..${HEAD_SHA} | \
            xargs -n1 dirname | \
            sort -u | \
            grep -v '^.$' | \
            while read -r dir; do
              for allowed in "${ALLOWED_PATHS_ARR[@]}"; do
                if [[ "$dir" == "$allowed" || "$dir" == "$allowed"/* ]]; then
                  echo "$dir"
                  break
                fi
              done
            done | tr '\n' ' ' || true)

          echo "Changed folders: $CHANGED_DIRS"
          echo "changed_dirs=$CHANGED_DIRS" >> $GITHUB_ENV

      - name: Generate Random Staging URL
        id: staging-url
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          RANDOM_STRING=$(openssl rand -hex 3)  # Generates a short random string
          STAGING_HOST="${STAGING_HOST_PREFIX}-${PR_NUMBER}-${RANDOM_STRING}.${STAGING_HOST_DOMAIN}"
          echo "Generated staging URL: $STAGING_HOST"
          echo "staging_host=$STAGING_HOST" >> $GITHUB_ENV

      - name: Modify ingress.yml
        run: |
          echo "Modifying ingress.yml..."
          ls -lah
          cat .iac/ingress.yml
          echo ${{ env.changed_dirs }}
          echo ${changed_dirs// /$'\n'}
          for folder in $changed_dirs; do
            url=$(cat README.md | grep "${folder}" | grep -o "https://[^)]*" | cut -d" " -f1)
            echo "URL: $url"
            if [ -n "$url" ]; then
              echo "URL found for ${folder} in README.md"
              echo "URL: $url"
              yq e ".rules[] | select(.host == \"$url\") | .host = \"$staging_host\"" -i .iac/ingress.yml
            else
              echo "${folder} url not found in README.md"
              exit 1
            fi
          done
          cat .iac/ingress.yml

      - name: Deploy to Kubernetes
        run: |
          for folder in $changed_dirs; do
            if [[ -d "$folder" ]]; then
              echo "Deploying $folder to Kubernetes..."
              kubectl apply -f $folder/
            fi
          done
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}

      - name: Announce New Hosts to Cloudflare
        run: |
          echo "Registering $staging_host on Cloudflare..."
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CF_ZONE_ID }}/dns_records" \
                -H "Authorization: Bearer ${{ secrets.CF_API_TOKEN }}" \
                -H "Content-Type: application/json" \
                --data '{
                  "type": "CNAME",
                  "name": "'$staging_host'",
                  "content": "gap.ulak.com",
                  "ttl": 3600,
                  "proxied": true
                }'

      - name: Comment on PR with New Staging URL
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          COMMENT="ðŸš€ **PR Preview Environment Deployed!**%0A- **New Host:** [${{ env.staging_host }}](https://${{ env.staging_host }})"
          PR_NUMBER=${{ github.event.pull_request.number }}
          curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
                -H "Content-Type: application/json" \
                -d "{\"body\": \"$COMMENT\"}" \
                "https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments"
